# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("@prelude//utils:utils.bzl", "flatten")
load("@prelude//python/sourcedb/filter.bxl", "do_filter")

def _check_targets_batched(ctx: bxl.Context, checked_targets: list[Label]) -> typing.Any:
    build_result = ctx.build(checked_targets)
    output = ctx.output.ensure_multiple(build_result)
    return {
        label.raw_target(): [artifact.rel_path() for artifact in artifacts]
        for label, artifacts in output.items()
    }

def _should_type_check(configured_target: bxl.ConfiguredTargetNode, analysis_result: bxl.AnalysisResult) -> bool:
    return (
        len(configured_target.sources()) > 0 and
        "typecheck" in analysis_result.providers()[DefaultInfo].sub_targets
    )

def filter_and_get_typecheck_subtargets(ctx: bxl.Context, targets: list[TargetLabel] | bxl.UnconfiguredTargetSet) -> list[Label]:
    configured_targets = ctx.configured_targets(
        do_filter(ctx.uquery(), targets, exclude_targets_with_special_labels = False),
    )
    analysis_results = ctx.analysis(configured_targets)
    return [
        configured_target.label.with_sub_target("typecheck")
        for configured_target in configured_targets
        if _should_type_check(configured_target, analysis_results[configured_target.label.with_sub_target()])
    ]

def check_targets(ctx: bxl.Context, targets: list[TargetLabel] | bxl.UnconfiguredTargetSet) -> None:
    checked_targets = filter_and_get_typecheck_subtargets(ctx, targets)
    artifacts = _check_targets_batched(ctx, checked_targets)

    ctx.output.print_json(
        {
            "artifacts": artifacts,
            "root": ctx.root(),
        },
    )

def _run_entry_point(ctx: bxl.Context) -> None:
    targets = flatten(ctx.cli_args.target)
    check_targets(ctx, targets)

run = bxl_main(
    doc = "Run [typecheck] on a set of targets or target patterns.",
    impl = _run_entry_point,
    cli_args = {
        "enable-sharding": cli_args.bool(
            default = False,
            doc = "Shard type checking within each target",
        ),
        "target": cli_args.list(
            cli_args.target_expr(
                doc = "Target pattern to run type checking on",
            ),
        ),
    },
)
