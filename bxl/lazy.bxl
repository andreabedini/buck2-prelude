# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

def catch_resolve_lazy_dict(bxl_ctx: bxl.Context, lazy_dict: dict[typing.Any, bxl.Lazy]) -> dict[typing.Any, bxl.Result]:
    """
    Resolves a dictionary of bxl.Lazy operations in parallel while capturing errors.

     Parameters:
    - `bxl_ctx`: BXL context
    - `lazy_dict`: Dictionary to resolve, where values must be `bxl.Lazy` instances

    Returns:
    A new dictionary preserving original keys, with values as `bxl.Result` objects.

    Example:
    ```python
    def _impl(ctx):
        lazy_dict = {
            "app": ctx.lazy.configured_targets("cell//:app"),
            "lib": ctx.lazy.configured_targets("cell//:lib")
        }

        # Batch resolve and process
        results = catch_resolve_lazy_dict(ctx, lazy_dict)
        for name, res in results.items():
            if res.is_ok():
                ctx.output.print(f"{name}: {res.unwrap()}")
            else:
                ctx.output.print(f"{name} failed: {res.unwrap_err()}")
    ```
    """
    keys = lazy_dict.keys()
    lazies = [lazy.catch() for lazy in lazy_dict.values()]
    values = bxl_ctx.lazy.join_all(lazies).resolve()
    return dict(zip(keys, values))
