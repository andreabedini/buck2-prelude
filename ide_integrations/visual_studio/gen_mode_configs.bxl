# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under both the MIT license found in the
# LICENSE-MIT file in the root directory of this source tree and the Apache
# License, Version 2.0 found in the LICENSE-APACHE file in the root directory
# of this source tree.

load("flags_parser_utils.bxl", "get_compiler_settings_from_flags", "get_linker_settings_from_flags")
load("get_compiler_settings.bxl", "gen_compiler_settings")
load("get_linker_settings.bxl", "gen_linker_settings")
load("utils.bxl", "dedupe_by_value", "get_mode_config_path", "h")

def _remove_flags_with_macros(flags: list) -> list:
    # Hacky way to find macros since regex sub is not available in bxl
    flags = [item for item in flags if "$(" not in item and ")" not in item]
    return dedupe_by_value(flags)

def _get_compiler_settings(default_platform: str) -> dict:
    # Super weird switches since there's a bug when passing in var to read_root_config
    # Reported to bxl team https://fb.workplace.com/groups/617497306123691/permalink/1098968927976524/
    # TODO: Remove this block when bug is fixed
    if default_platform == "cxx_#default":
        cxxppflags = read_root_config("cxx_#default", "cxxppflags") or ""
        cxxflags = read_root_config("cxx_#default", "cxxflags") or ""
    elif default_platform == "fbcode-platform-cxx#platform010-clang":
        cxxppflags = read_root_config("fbcode-platform-cxx#platform010-clang", "cxxppflags") or ""
        cxxflags = read_root_config("fbcode-platform-cxx#platform010-clang", "cxxflags") or ""
    else:
        return {}
    compiler_flags = cxxppflags.split(" ") + cxxflags.split(" ")
    compiler_flags = _remove_flags_with_macros(compiler_flags)
    return get_compiler_settings_from_flags(compiler_flags)

def _get_linker_settings(default_platform: str, buck_root: str) -> dict:
    if default_platform == "cxx_#default":
        ldflags = read_root_config("cxx_#default", "ldflags") or ""
    elif default_platform == "fbcode-platform-cxx#platform010-clang":
        ldflags = read_root_config("fbcode-platform-cxx#platform010-clang", "ldflags") or ""
    else:
        return {}
    linker_flags = ldflags.split(" ")
    linker_flags = _remove_flags_with_macros(linker_flags)
    return get_linker_settings_from_flags(linker_flags, buck_root)

def _get_platform_toolset(bxl_ctx):
    if "android" in bxl_ctx.cli_args.mode_name:
        return "Clang_5_0"
    elif "clang" in read_root_config("cxx_#default", "cxx_type"):
        # We can hardcode "cxx_#default" here since android is handled
        return "ClangCL"
    elif bxl_ctx.cli_args.vs_version_year == "2019":
        return "v142"
    else:
        return "v143"

def _main(bxl_ctx):
    default_platform = "cxx_#default"
    if "android" in bxl_ctx.cli_args.mode_name and bxl_ctx.cli_args.fbsource:
        default_platform = "fbcode-platform-cxx#platform010-clang"

    compiler_settings = _get_compiler_settings(default_platform)
    linker_settings = _get_linker_settings(default_platform, bxl_ctx.root())
    platform_toolset = _get_platform_toolset(bxl_ctx)

    # Set default language standard
    if "LanguageStandard" not in compiler_settings:
        compiler_settings["LanguageStandard"] = "stdcpp20"

    # Overwrite configs for android projects
    if "android" in bxl_ctx.cli_args.mode_name:
        compiler_settings.pop("LanguageStandard")

    compiler_settings_content = gen_compiler_settings(compiler_settings)
    linker_settings_content = gen_linker_settings(linker_settings)

    toolchains_props = ""
    if bxl_ctx.cli_args.fbsource:
        if platform_toolset != "Clang_5_0":
            toolchains_props = "    <Import Project=\"$(RepoRoot)\\third-party\\toolchains\\visual_studio\\toolchain.props\"/>"

    content = cmd_args(
        """<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
""",
        """    <Import Project="$(VCTargetsPath)\\Microsoft.Cpp.default.props" />""",
        h(
            "PropertyGroup",
            [
                h("PlatformToolset", platform_toolset, indent_level = 2),
            ],
            indent_level = 1,
        ),
        """    <Import Project="$(VCTargetsPath)\\Microsoft.Cpp.props" />""",
        """    <ItemDefinitionGroup>""",
        compiler_settings_content,
        linker_settings_content,
        """    </ItemDefinitionGroup>""",
        """    <Import Condition="exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" Project="$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props"/>""",
        toolchains_props,
        """    <Import Project="$(VCTargetsPath)\\Microsoft.Cpp.Targets" />""",
        """    <Import Project="$(RepoRoot)\\arvr\\tools\\buck\\vs_buck_build.props"/>""",
        """</Project>""",
        delimiter = "\n",
    )

    actions = bxl_ctx.bxl_actions().actions
    artifact = actions.declare_output(get_mode_config_path(bxl_ctx.cli_args.mode_name))
    actions.write(artifact.as_output(), content, allow_args = True)
    bxl_ctx.output.print(bxl_ctx.output.ensure(artifact).abs_path())

main = bxl_main(
    impl = _main,
    cli_args = {
        "fbsource": cli_args.bool(
            default = False,
            doc = "Whether to turn on fbsource specific behaviors.",
        ),
        "mode_name": cli_args.string(
            doc = "Single mode file to generate projects for.",
        ),
        "vs_version_year": cli_args.string(
            default = "2022",
            doc = "Generate mode configs for Visual Studio <vs_version_year> projects",
        ),
    },
)
